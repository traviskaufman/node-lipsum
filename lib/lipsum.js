// Generated by CoffeeScript 1.12.7

/*
 * Lorem Ipsum Wrapper

Main entry point for the node-lipsum module. Provides wrappers for
the Parser and Service classes as well as an easy method to get text
from the lipsum.com service.
 */
var Lipsum, Parser, Service, events,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Service = require('./service');

Parser = require('./parser');

events = require('events');

Lipsum = (function(superClass) {
  extend(Lipsum, superClass);

  function Lipsum() {
    this.serviceCallback = bind(this.serviceCallback, this);
    this.parserSuccessCallBack = bind(this.parserSuccessCallBack, this);
    this.getText = bind(this.getText, this);

    /* Class Constructor */
    this.parser = new Parser();
    this.service = new Service();
  }

  Lipsum.prototype.defaults = {

    /*
    These parameters will be passed by default to lipsum.com in the query
     */
    amount: 5,
    what: 'paras',
    start: 'no'
  };

  Lipsum.prototype.getText = function(callback, opts) {

    /*
    Retrieves dummy text from lipsum.com
    
    callback: {Function} Should take one parameter for the text
              returned from lipsum.com. Called on successful retrieval
              of said text.
    
    opts: {Object} Options to pass onto the lipsum.com query. These will
          be transformed into url query params, so if you pass in something
          like {start: 'yes', what: 'bytes'} that will become
          "?start=yes&what=bytes"
     */
    var i, len, prop, ref;
    if (!opts) {
      opts = this.defaults;
    } else {
      ref = this.defaults;
      for (i = 0, len = ref.length; i < len; i++) {
        prop = ref[i];
        if (opts[prop] == null) {
          opts[prop] = this.defaults[prop];
        }
      }
    }
    this.service.get("json", this.serviceCallback, opts);
    return this.once('lipsum', function(txt) {
      return callback(txt);
    });
  };

  Lipsum.prototype.parserSuccessCallBack = function(result) {

    /* Called on successful parsing of returned dummy text. */
    return this.emit('lipsum', result.feed.lipsum);
  };

  Lipsum.prototype.parserErrorCallBack = function(err) {

    /* Called on Parser Error. */
    throw new Error("Parser Error: " + err.message);
  };

  Lipsum.prototype.serviceCallback = function(text) {

    /*
    Called when the lipsum.com service succesfully retrieves
    text from the lipsum.com service.
     */
    return this.parser.feed(text).parse(this.parserSuccessCallBack, this.parserErrorCallBack);
  };

  return Lipsum;

})(events.EventEmitter);

if (typeof module !== "undefined" && module !== null) {
  module.exports = Lipsum;
}
